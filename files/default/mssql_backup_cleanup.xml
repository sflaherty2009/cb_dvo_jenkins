<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions/>
  <description>Cleans up the aztrksal0420eu20dbbackup/operational blob storage container and all file shares. Maintains backup files as specified in Trek&apos;s retention policy (https://trekbikes.atlassian.net/wiki/spaces/DVO/pages/427098217/Backups).</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>H H(3-6) * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.64">
    <script>import groovy.json.JsonOutput

def slackNotificationChannel = &quot;#alerts-devops_builds&quot;
def slackUsername = &quot;The Backerupper&quot;

def notifySlack(text, channel, username, attachments) {
  def slackURL = &apos;https://hooks.slack.com/services/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&apos;

  def payload = JsonOutput.toJson([text: text,
    channel: channel,
    username: username,
    icon_emoji: &apos;:ronswanson:&apos;,
    attachments: attachments
  ])

  sh &quot;curl -s -X POST --data-urlencode &apos;payload=${payload}&apos; ${slackURL}&quot;
}

node{
  try {
    stage(&apos;Cleaning up MSSQL backups&apos;) {
      withCredentials([azureServicePrincipal(&apos;azureCreds&apos;)]) {
        docker.withRegistry(&apos;https://conbase.azurecr.io&apos;, &apos;conBase&apos;) {
          image = docker.image(&apos;conbase.azurecr.io/azbackup:1.0&apos;)
          image.pull()
          sh &quot;docker run --entrypoint &apos;/mssqlbackupcleanup.sh&apos; -e AZURE_CLIENT_ID -e AZURE_CLIENT_SECRET -e AZURE_TENANT_ID -e AZURE_SUBSCRIPTION_ID conbase.azurecr.io/azbackup:1.0&quot;
        }
        sh &apos;docker container prune --force&apos;
      }

      /*notifySlack(&quot;&quot;, slackNotificationChannel, slackUsername, [
        [
          color: &quot;good&quot;,
          text: &quot;Cleaned up MSSQL operational blob backups.&quot;,
          &quot;mrkdwn_in&quot;: [&quot;fields&quot;],
          fields: [
            [
                title: &quot;Status&quot;,
                value: &quot;Backup Success&quot;,
                short: true
            ]
          ]
        ]
      ])*/
    }
  } catch (e) {
    /*notifySlack(&quot;&quot;, slackNotificationChannel, slackUsername, [
      [
        color: &quot;danger&quot;,
        text: &quot;MSSQL backup cleanup process failed.&quot;,
        &quot;mrkdwn_in&quot;: [&quot;fields&quot;],
        fields: [
          [
            title: &quot;Error&quot;,
            value: &quot;${e}&quot;,
            short: false
          ]
        ]
      ]
    ])*/
    throw e
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>