<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.29">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>environment</name>
          <description>Environment where you would like to drain traffic from a hybris content node.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>prd</string>
              <string>tst</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>hybrisNode</name>
          <description>Which node?</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>hyb-02</string>
              <string>hyb-03</string>
              <string>hyb-04</string>
              <string>hyb-05</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.60">
    <script>import groovy.json.JsonOutput

def slackNotificationChannel = &quot;#devops-test&quot;
def slackUsername = &quot;The Traffic Drainer&quot;
def webServers = [&quot;azl-${env.environment}-web-01&quot;,&quot;azl-${env.environment}-web-02&quot;,&quot;azl-${env.environment}-web-03&quot;]

def notifySlack(text, channel, username, attachments) {
  def slackURL = &apos;https://hooks.slack.com/services/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&apos;
  def jenkinsIcon = &apos;https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png&apos;

  def payload = JsonOutput.toJson([text: text,
    channel: channel,
    username: username,
    icon_url: jenkinsIcon,
    attachments: attachments
  ])

  sh &quot;curl -X POST --data-urlencode \&apos;payload=${payload}\&apos; ${slackURL}&quot;
}

def curlCommand(user, password, webServer, command) {
  sh ( script: &quot;curl -s -u ${user}:${password} \&quot;${webServer}.trek.web:6969/balancer-manager\&quot; | ${command}&quot;, returnStdout: true ).trim()
}

def trafficDrain(user, password, servers, hybrisNode){
  servers.each { server -&gt;
    def nonce = curlCommand(user, password, server, &quot;grep nonce | grep \&quot;hybris-content-ssl\&quot; | sed \&quot;s/.*nonce=\\(.*\\)[&apos;\\\&quot;].*/\\1/\&quot; | tail -n 1&quot;)
    def toggle = curlCommand(user, password, server, &quot;grep \&quot;azl-${env.environment}-${hybrisNode}\&quot; | grep -c \&quot;Init Ok\&quot; || echo \$1&quot;)
    buildColor = toggle == &apos;1&apos; ? &quot;warning&quot; : &quot;good&quot;
    buildStatus = toggle == &apos;1&apos; ? &quot;Draining Traffic&quot; : &quot;Traffics a Flowin&quot;

    sh &quot;curl -s -o /dev/null -u ${user}:${password} -XPOST \&quot;http://${server}.trek.web:6969/balancer-manager?\&quot; \
        -d b=\&quot;hybris-content-ssl\&quot; \
        -d w=\&quot;ajp://azl-${env.environment}-${hybrisNode}\&quot; \
        -d nonce=\&quot;${nonce}\&quot; \
        -d w_status_N=\&quot;${toggle}\&quot;&quot;
  }
}

node{
  try {
    stage(&apos;Toggling Draining&apos;) {
      withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;apache_devops&apos;,
      usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;]]) {
        trafficDrain(env.USERNAME, env.PASSWORD, webServers, env.hybrisNode)
      }

      notifySlack(&quot;&quot;, slackNotificationChannel, slackUsername, [
        [
          color: &quot;${buildColor}&quot;,
          text: &quot;Toggling Draining Mode:&quot;,
          &quot;mrkdwn_in&quot;: [&quot;fields&quot;],
          fields: [
            [
                title: &quot;Node&quot;,
                value: &quot;azl-${env.environment}-${env.hybrisNode}&quot;,
                short: true
            ],
            [
                title: &quot;Status&quot;,
                value: &quot;${buildStatus}&quot;,
                short: true
            ]
          ]
        ]
      ])
    }
  } catch (e) {
    notifySlack(&quot;&quot;, slackNotificationChannel, slackUsername, [
      [
        color: &quot;danger&quot;,
        text: &quot;Something went wrong while attempting to toggle draining.&quot;,
        &quot;mrkdwn_in&quot;: [&quot;fields&quot;],
        fields: [
          [
            title: &quot;Attempted Node&quot;,
            value: &quot;azl-${env.environment}-${env.hybrisNode}&quot;,
            short: false
          ],
          [
            title: &quot;Error&quot;,
            value: &quot;${e}&quot;,
            short: false
          ]
        ]
      ]
    ])
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>